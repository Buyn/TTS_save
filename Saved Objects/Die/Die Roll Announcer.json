{
  "SaveName": "",
  "GameMode": "",
  "Date": "",
  "Table": "",
  "Sky": "",
  "Note": "",
  "Rules": "",
  "LuaScript": "",
  "LuaScriptState": "",
  "ObjectStates": [
    {
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -27.5,
        "posY": 0.925284863,
        "posZ": 19.5,
        "rotX": 5.32550132E-07,
        "rotY": 179.9952,
        "rotZ": -1.41098624E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Die Roll Announcer",
      "Description": "Click [b]ON[/b] or [b]OFF[/b] to enable/disable roll announcements.",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "<Battle For Greyport>greyport_announce_button.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function onLoad()\r\n    resetRolledDiceTable()\r\n\r\n    local loopID = self.AssetBundle.getLoopingEffectIndex()\r\n    if loopID == 0 then\r\n        announceResult = true\r\n    else\r\n        announceResult = false\r\n    end\r\n\r\n    self.createButton({\r\n        click_function = \"click_announceToggle\", function_owner=self,\r\n        position={0,0.2,0.9}, height=600, width=800, color={1,1,1,0}\r\n    })\r\nend\r\n\r\n--API trigger, watching for dice to be rolled or picked back up\r\n\r\nfunction onObjectRandomize(obj, color)\r\n    rollCheck(obj, color)\r\nend\r\n\r\nfunction onObjectPickedUp(color, obj)\r\n    resetCheck(obj)\r\nend\r\n\r\n--Removes a die from the roll table (if it is picked up after roll, before rest)\r\nfunction resetCheck(obj)\r\n    if obj.tag == \"Dice\" then\r\n        local objType = obj.getVar(\"dieType\")\r\n        if ref_rolledDice[objType] ~= nil and ref_rolledDice[objType][obj] ~= nil then\r\n            ref_rolledDice[objType][obj] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--Checks if an object is a die, then if it was a die with a script tag\r\n--If it is, then it checks if it was already rolled. If not, then monitor roll\r\nfunction rollCheck(obj, color)\r\n    if obj.tag == \"Dice\" then\r\n        local objType = obj.getVar(\"dieType\")\r\n        if ref_rolledDice[objType] ~= nil and ref_rolledDice[objType][obj] == nil then\r\n            --Add entry to table, indicating it is rolled and moving\r\n            ref_rolledDice[objType][obj] = true\r\n            awaitRollToStop(obj, objType, color)\r\n        end\r\n    end\r\nend\r\n\r\n--Watching rolls, waiting for all rolls to end\r\n\r\n--Coroutine to await die coming to rest\r\nfunction awaitRollToStop(obj, objType, color)\r\n    function coroutine_awaitRollToStop()\r\n        --Wait for die not to be held\r\n        while obj.held_by_color ~= nil do\r\n            coroutine.yield(0)\r\n        end\r\n\r\n        --Starting time for a timeout of 5 seconds if a die fails to rest\r\n        --Currently disabled\r\n        --local startTime = os.time()\r\n\r\n        --Wait for die to rest\r\n        while obj.resting == false do\r\n            coroutine.yield(0)\r\n            --This aborts the roll entirely if a die goes missing\r\n            if obj == nil then\r\n                resetRolledDiceTable()\r\n                return 1\r\n            end\r\n            if ref_rolledDice[objType][obj] == nil then\r\n                return 1\r\n            end\r\n\r\n            --[[Timeout if a die is taking too long to come to rest (disabled)\r\n            if startTime+5 <= os.time() then\r\n                break\r\n            end]]\r\n        end\r\n        --Makes entry false, indicating it is no longer moving, pending print\r\n        ref_rolledDice[objType][obj] = false\r\n\r\n        --check if any entries in the propper table are still true (rolling)\r\n        for _, entry in pairs(ref_rolledDice) do\r\n            for _, rollingStatus in pairs(entry) do\r\n                if rollingStatus == true then\r\n                    return 1 --kills the coroutine until other dice check in\r\n                end\r\n            end\r\n        end\r\n\r\n        --If coroutine wasn't killed by now, we proceed to printing result\r\n        broadcastRollResults(color)\r\n\r\n        return 1\r\n    end\r\n    startLuaCoroutine(self, \"coroutine_awaitRollToStop\")\r\nend\r\n\r\n--Find, format and display roll results\r\n\r\n--The logic to broadcast the final result\r\nfunction broadcastRollResults(color)\r\n    local totalValue = 0\r\n    for _, entry in pairs(ref_rolledDice) do\r\n        for die in pairs(entry) do\r\n            local rollResult = getRollResult(die)\r\n            die.setName(rollResult)\r\n            totalValue = totalValue + rollResult\r\n        end\r\n    end\r\n\r\n    if announceResult == true then\r\n        broadcastToAll(totalValue, stringColorToRGB(color))\r\n    end\r\n\r\n    resetRolledDiceTable()\r\nend\r\n\r\n--Finds which die face is the most \"up\" and returns its ref_faceReference key\r\n--Special thanks to dzikakulka from the forums for this great formula\r\nfunction getRollResult(die)\r\n    local pos = die.getPosition()\r\n    local objTransform = {pos.x, pos.y+1, pos.z}\r\n    local objTransform_local = die.positionToLocal(objTransform)\r\n\r\n    --Create table containing magnitute of angles for each face\r\n    local transformResults = {}\r\n    for faceValue, refTransform in pairs(ref_faceReference[die.getVar(\"dieType\")]) do\r\n        local angle_rad = getAngle(objTransform_local, refTransform)\r\n        local angle_deg = math.deg(angle_rad)\r\n        table.insert(transformResults, {faceValue=faceValue, distance=angle_deg})\r\n    end\r\n\r\n    --Sorts\r\n    table.sort(transformResults, function(e1, e2) return (e1.distance < e2.distance) end)\r\n\r\n    return transformResults[1].faceValue\r\nend\r\n\r\n--Math functions used in getRollResult\r\n\r\n--Gets dot product for 2 tables\r\nfunction getDotProduct(v1,v2)\r\n    local sum = 0\r\n    for i=1, 3 do\r\n        sum = sum + v1[i] * v2[i]\r\n    end\r\n    return sum\r\nend\r\n\r\n--Gets angle (in radians) of 2 angles\r\nfunction getAngle(v1, v2)\r\n    local dotProduct = getDotProduct(v1, v2)\r\n    local v1_normal = math.sqrt(getDotProduct(v1,v1))\r\n    local v2_normal = math.sqrt(getDotProduct(v2,v2))\r\n    return math.acos( dotProduct/(v1_normal*v2_normal) )\r\nend\r\n\r\n--Click function for button\r\n\r\nfunction click_announceToggle()\r\n    local loopID = self.AssetBundle.getLoopingEffectIndex()\r\n    if loopID == 0 then\r\n        self.AssetBundle.playLoopingEffect(1)\r\n        self.AssetBundle.playTriggerEffect(0)\r\n        announceResult = false\r\n    else\r\n        self.AssetBundle.playLoopingEffect(0)\r\n        self.AssetBundle.playTriggerEffect(0)\r\n        announceResult = true\r\n    end\r\nend\r\n\r\n--Data tables and resetting data info\r\n\r\n--Sets up data table that monitors dice\r\nfunction resetRolledDiceTable()\r\n    ref_rolledDice = {\r\n        [\"Yellow Die\"]={},\r\n        [\"White Die\"]={},\r\n        [\"Green Die\"]={},\r\n    }\r\nend\r\n\r\n--Data on what is \"face up\" for a given side for each die type\r\nref_faceReference = {\r\n    [\"Yellow Die\"] = {\r\n        ['1'] = {0,1,0},\r\n        ['3'] = {1,0,0},\r\n        ['2'] = {0,0,1},\r\n        ['4'] = {0,-1,0},\r\n        ['3 '] = {-1,0,0},\r\n        ['2 '] = {0,0,-1},\r\n    },\r\n    [\"White Die\"] = {\r\n        ['1'] = {0,1,0},\r\n        ['4'] = {1,0,0},\r\n        ['5'] = {0,0,1},\r\n        ['6'] = {0,-1,0},\r\n        ['3'] = {-1,0,0},\r\n        ['2'] = {0,0,-1},\r\n    },\r\n    [\"Green Die\"] = {\r\n        ['4'] = {0,1,0},\r\n        ['6'] = {1,0,0},\r\n        ['5'] = {0,0,1},\r\n        ['8'] = {0,-1,0},\r\n        ['6 '] = {-1,0,0},\r\n        ['7'] = {0,0,-1},\r\n    },\r\n}",
      "LuaScriptState": "",
      "GUID": "073b6b"
    }
  ],
  "TabStates": {},
  "VersionNumber": ""
}