{
  "SaveName": "",
  "GameMode": "",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Date": "",
  "Table": "",
  "Sky": "",
  "Note": "",
  "Rules": "",
  "XmlUI": "",
  "LuaScript": "",
  "LuaScriptState": "",
  "ObjectStates": [
    {
      "Name": "Custom_Token",
      "Transform": {
        "posX": -82.0,
        "posY": 1.639995,
        "posZ": 53.0,
        "rotX": -1.40477727E-08,
        "rotY": 269.998474,
        "rotZ": -1.02367367E-05,
        "scaleX": 1.87605023,
        "scaleY": 1.0,
        "scaleZ": 1.87605023
      },
      "Nickname": "Spell Slot Tracker Narrow",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://i.imgur.com/OYOL4pA.jpg",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 25.0,
          "Stackable": false
        }
      },
      "XmlUI": "",
      "LuaScript": "-- Based on \"Universal Counter Tokens\" coded by: MrStump\r\n-- Modifications by Malle\r\n\r\n--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save\r\nfunction onSave()\r\n    local data_to_save = {}\r\n        data_to_save.saved_counts = {}\r\n        for i,v in pairs(buttons.counts) do\r\n            data_to_save.saved_counts[tostring(i)] = v or 0\r\n        end\r\n\r\n    saved_data = JSON.encode(data_to_save)\r\n\r\n    --Uncomment this line to reset the save data, necessary when messing with variable names\r\n    --saved_data = ''\r\n    return saved_data\r\nend\r\n\r\n\r\n-- *****************************************************************************\r\n-- OnLoad startup\r\n-- *****************************************************************************\r\n-- Loads the saved data then creates the buttons\r\nfunction onload(saved_data)\r\n    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}\r\n    initButtonsTable()\r\n    objs = {}\r\n\r\n    ------------------------------\r\n    --Edit below this line\r\n    ------------------------------\r\n\r\n    -- LockLevel:\r\n    --  0: always locked\r\n    --  1: locked if semi- or full lock\r\n    --  2: locked only in full lock\r\n    --  3+: not locked\r\n\r\n    thick = 0.099; sub_parameters_x = -4.00; dd = 1.15; dy = -4.8; dx = 5.1\r\n\r\n    createCounter('lockButton', 'wideToggle', -0.270, -3.40, 0, 3)\r\n\r\n    px = -0.270; dx = 0.780;\r\n    py = -2.815; dy = 0.740;\r\n    createCounter('spellSlotsMax1',  'big',  px+0*dx, py+0*dy, 0, 1);\r\n    createCounter('spellSlotsMax2',  'big',  px+0*dx, py+1*dy, 0, 1);\r\n    createCounter('spellSlotsMax3',  'big',  px+0*dx, py+2*dy, 0, 1);\r\n    createCounter('spellSlotsMax4',  'big',  px+0*dx, py+3*dy, 0, 1);\r\n    createCounter('spellSlotsMax5',  'big',  px+0*dx, py+4*dy, 0, 1);\r\n    createCounter('spellSlotsMax6',  'big',  px+0*dx, py+5*dy, 0, 1);\r\n    createCounter('spellSlotsMax7',  'big',  px+0*dx, py+6*dy, 0, 1);\r\n    createCounter('spellSlotsMax8',  'big',  px+0*dx, py+7*dy, 0, 1);\r\n    createCounter('spellSlotsMax9',  'big',  px+0*dx, py+8*dy, 0, 1);\r\n\r\n    createCounter('spellSlotsUsed1', 'big',  px+1*dx, py+0*dy, 0, 2);\r\n    createCounter('spellSlotsUsed2', 'big',  px+1*dx, py+1*dy, 0, 2);\r\n    createCounter('spellSlotsUsed3', 'big',  px+1*dx, py+2*dy, 0, 2);\r\n    createCounter('spellSlotsUsed4', 'big',  px+1*dx, py+3*dy, 0, 2);\r\n    createCounter('spellSlotsUsed5', 'big',  px+1*dx, py+4*dy, 0, 2);\r\n    createCounter('spellSlotsUsed6', 'big',  px+1*dx, py+5*dy, 0, 2);\r\n    createCounter('spellSlotsUsed7', 'big',  px+1*dx, py+6*dy, 0, 2);\r\n    createCounter('spellSlotsUsed8', 'big',  px+1*dx, py+7*dy, 0, 2);\r\n    createCounter('spellSlotsUsed9', 'big',  px+1*dx, py+8*dy, 0, 2);\r\n\r\n    --if you added a location, you need to give it a position, coordinates are relative to the center of the model\r\n    --buttons.params.positions.test = {x = 3.67, y = 0.59, z = 3.1}\r\n\r\n    ------------------------------\r\n    --Don't touch below this line\r\n    ------------------------------\r\n\r\n    for i,v in pairs(buttons) do\r\n        buttons.counts[tostring(i)] = 0\r\n\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)\r\n            self.setVar(tostring(i) .. 'PlusFive', function () plus(tostring(i), 100) end)\r\n            self.setVar(tostring(i) .. 'PlusTen', function () plus(tostring(i), 10) end)\r\n            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)\r\n            self.setVar(tostring(i) .. 'MinusFive', function () minus(tostring(i), 100) end)\r\n            self.setVar(tostring(i) .. 'MinusTen', function () minus(tostring(i), 10) end)\r\n            self.setVar(tostring(i) .. 'DispClick', function () dispclick(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'ProfClick', function () profclick(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'LockClick', function () lockForm(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)\r\n        end\r\n    end\r\n\r\n    generateButtonParamiters()\r\n\r\n    --Checks if there is a saved data. If there is, it gets the saved value for 'buttons.counts.ct'\r\n\r\n    if saved_data != '' then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        buttons.counts = loaded_data.saved_counts\r\n        for i,v in pairs(buttons) do\r\n            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then\r\n                if buttons.counts[tostring(i)] == nil then\r\n                    buttons.counts[tostring(i)] = 0\r\n                end\r\n            end\r\n        end\r\n    else\r\n        for i,v in pairs(buttons) do\r\n            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then\r\n                if buttons[tostring(i)].defaultValue == nil then\r\n                    buttons.counts[tostring(i)] = 0\r\n                else\r\n                    buttons.counts[tostring(i)] = buttons[tostring(i)].defaultValue\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    updateDisplay(true)\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Form creation functions\r\n-- *****************************************************************************\r\nfunction createTextField(sname, type, px, py, defaultValue, lockLevel)\r\n    name = '__' .. sname;\r\n    buttons[name] = { type = type }\r\n    buttons.params.positions[name] = {x = px, y = thick, z = py}\r\n    buttons[name].defaultValue = defaultValue\r\n    buttons[name].lockLevel = lockLevel\r\nend\r\n\r\nfunction createSubCounter(name, py, defaultValue, lockLevel)\r\n    createCounter('p_s_' .. name, 'toggle', sub_parameters_x - 0.72, py, 0, lockLevel)\r\n    createCounter('s_' .. name, 'small', sub_parameters_x, py, defaultValue, lockLevel)\r\nend\r\n\r\nfunction createCounter(name, btype, px, py, defaultValue, lockLevel)\r\n    buttons[name] = {type = btype}\r\n    buttons.params.positions[name] = {x = px, y = thick, z = py}\r\n    buttons[name].defaultValue = defaultValue\r\n    buttons[name].lockLevel = lockLevel\r\nend\r\n\r\nfunction createValue(name, btype, px, py, defaultValue)\r\n    createCounter('v_' .. name, btype, px, py, defaultValue)\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Standardized form sizes\r\n-- *****************************************************************************\r\nfunction initButtonsTable()\r\n\r\n    buttons = {}\r\n    buttons.index = 0\r\n    buttons.counts = {}\r\n    buttons.params = {}\r\n    buttons.params.positions = {}\r\n    buttons.params.positions.offsets = {}\r\n    buttons.params.sizes = {}\r\n    buttons.targetFunc = {}\r\n\r\n    --make a style of button by adding a new size\r\n    buttons.params.sizes.std = {\r\n        display = {width = 200, height = 150, font = 100},\r\n        button = {width = 50, height = 50, font = 50},\r\n        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.mid = {\r\n        display = {width = 0, height = 0, font = 280},\r\n        button = {width = 140, height = 130, font = 150},\r\n        offsets = { bottomButtons = {x = 0.36, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.big = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = {width = 80, height = 80, font = 130},\r\n        offsets = { bottomButtons = {x = 0.220, y = 0, z = -0.01}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.mid10 = {\r\n        display = {width = 0, height = 0, font = 280},\r\n        button = {width = 280, height = 170, font = 150},\r\n        offsets = { bottomButtons = {x = 0.9, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.big10 = {\r\n        display = {width = 0, height = 0, font = 450},\r\n        button = {width = 400, height = 210, font = 220},\r\n        offsets = { bottomButtons = {x = 1.5, y = 0, z = 0}, topButtons = {x = 2.4, y = 0, z = -0} }\r\n    }\r\n    buttons.params.sizes.small = {\r\n        display = {width = 0, height = 0, font = 140},\r\n        button = {width = 110, height = 100, font = 140},\r\n        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.toggle = {\r\n        display = {width = 200, height = 170, font = 160},\r\n        button = {width = 60, height = 60, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.toggleBig = {\r\n        display = {width = 540, height = 380, font = 400},\r\n        button = {width = 60, height = 60, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.wideToggle = {\r\n        display = {width = 180, height = 80, font = 70},\r\n        button = {width = 60, height = 400, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.xp = {\r\n        display = {width = 0, height = 0, font = 150},\r\n        button = {width = 220, height = 150, font = 80},\r\n        offsets = { bottomButtons = {x = 1.15, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.hd = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = {width = 220, height = 150, font = 80},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = -0.4}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.hdBig = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = {width = 280, height = 170, font = 150},\r\n        offsets = { bottomButtons = {x = 0.9, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt = {\r\n        display = {width = 0, height = 0, font = 70},\r\n        button = {width = 200, height = 100, font = 60},\r\n        offsets = { bottomButtons = {x = -2.1, y = 0, z = -0.3}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt2 = {\r\n        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -2.3, y = 0, z = -1.3}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt3 = {\r\n        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -1.7, y = 0, z = -1.45}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txtbig = {\r\n        display = {width = 0, height = 0, font = 150},\r\n        button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = 3.70, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txtbig2 = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -0.8, y = 0, z = -0.2}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Button press functions\r\n-- *****************************************************************************\r\nfunction editclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        nm = tostring(location) --string.gsub(location, \"\", \"\")\r\n        --print(\"Edit click \" .. nm)\r\n        local sizes = buttons.params.sizes[buttons[nm].type].offsets\r\n        --print(sizes)\r\n        mpos = self.getPosition(); pos = buttons.params.positions[nm]\r\n        --print(self.getRotation()[1]); print(self.getRotation()[2]); print(self.getRotation()[3]);\r\n        --scale = self.getScale();    print(scale[3])\r\n        local btns = self.getButtons()\r\n        if (btns == nil) then return end\r\n        --print(buttons)\r\n        button = nil\r\n        fname = tostring(location) .. 'EditClick'\r\n        --for i,v in pairs(btns) do\r\n            --print(tostring(i) .. ' :: ' .. tostring(v.click_function))\r\n        --    if (v.click_function == fname) then\r\n        --        button = v\r\n        --        break\r\n        --    end\r\n        --end\r\n        --if (button == nil) then return end\r\n        --print(\"z = \" .. tostring(pos.z))\r\n        --pos = button.position\r\n        --ppos = button.position\r\n        ppos = {pos.x - sizes.bottomButtons.x - 0.3, pos.y, pos.z*1.4 + sizes.bottomButtons.z*1.4}--ppos = {pos.x*1.1 - sizes.bottomButtons.x*1.3, pos.y, pos.z-2 + (pos.z+3.8) * 0.25}\r\n        --ppos = {pos.x - sizes.bottomButtons.x, pos.y, pos.z + sizes.bottomButtons.z/2}\r\n        --print(tostring(pos[1]) .. ' , ' .. tostring(pos[2]) .. ' , ' .. tostring(pos[3]))\r\n        --print(tostring(pos.x) .. ' , ' .. tostring(pos.y) .. ' , ' .. tostring(pos.z))\r\n        if (objs[nm] != nil) then\r\n            buttons.counts[nm] = objs[nm].getDescription()\r\n            destroyObject(objs[nm])\r\n            objs[nm] = nil\r\n        else\r\n            local pos = self.getPosition()\r\n            local rot = self.getRotation()\r\n            local sca = self.getScale()\r\n            print('Pos: ' .. pos['x'] .. ', ' .. pos['y'] .. ', ' .. pos['z'])\r\n            print('Rot: ' .. rot['x'] .. ', ' .. rot['y'] .. ', ' .. rot['z'])\r\n            print('Sca: ' .. sca['x'] .. ', ' .. sca['y'] .. ', ' .. sca['z'])\r\n            local pawn_pos = {}\r\n            pawn_pos['x'] = pos['x']+ppos[1]--+1.2\r\n            pawn_pos['z'] = pos['z']-ppos[3] --1.8\r\n            --translate point to origin\r\n            local tempX = (pawn_pos['x'] - pos['x'])*sca['x']\r\n            local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']\r\n            --now apply rotation\r\n            local rad_rot = math.rad(original_rot['y'] - rot['y'])\r\n            local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)\r\n            local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);\r\n            --translate back\r\n            local new_pawn_x = obj_rotatedX + pos['x'];\r\n            local new_pawn_z = obj_rotatedZ + pos['z'];\r\n            local params = {}\r\n            --params.type = 'PlayerPawn'\r\n            local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}\r\n\r\n            o = spawnObject({\r\n                type = 'backgammon_piece_brown',\r\n                --position = {mpos[1] + pos.x, mpos[2] + pos.y+2, mpos[3] - pos.z},\r\n                position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},\r\n                --position = button.position,\r\n                scale = {0.4, 0.4, 0.4}\r\n            })\r\n            --o.position = button.position\r\n            objs[nm] = o\r\n            o.setDescription(tostring(buttons.counts[nm]))\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction dud()\r\n\r\nend\r\n\r\nfunction profclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] >= 3) then\r\n            dd = -2*buttons.counts[\"profbonus\"]\r\n            buttons.counts[location] = 0\r\n        elseif (buttons.counts[location] <= 0) then\r\n            dd = math.floor(0.5*buttons.counts[\"profbonus\"])\r\n            buttons.counts[location] = 1\r\n        elseif (buttons.counts[location] == 1) then\r\n            dd = math.ceil(0.5*buttons.counts[\"profbonus\"])\r\n            buttons.counts[location] = 2\r\n        else\r\n            dd = buttons.counts[\"profbonus\"]\r\n            buttons.counts[location] = 3\r\n        end\r\n        sf = string.sub(location, 3, string.len(location));\r\n        --print(location .. ' => ' .. sf)\r\n\r\n        --Added an extra \"if\" statement to account for independent toggle buttons (Such as Death Saving Throws)\r\n        if (buttons.counts[sf] != nil) then\r\n            buttons.counts[sf] = buttons.counts[sf] + dd\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction dispclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] > 0) then\r\n            dd = -2\r\n            buttons.counts[location] = 0\r\n        else\r\n            dd = 2\r\n            buttons.counts[location] = 1\r\n        end\r\n        sf = string.sub(location, 3, string.len(location));\r\n        --print(location .. ' => ' .. sf)\r\n\r\n        --Added an extra \"if\" statement to account for independent toggle buttons (Such as Death Saving Throws)\r\n        if (buttons.counts[sf] != nil) then\r\n            buttons.counts[sf] = buttons.counts[sf] + dd\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction plus(location, amount)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (location == \"str\") or (location == \"dex\") or (location == \"cons\") or (location == \"int\") or (location == \"wis\") or (location == \"cha\") then\r\n            updateAbilityModifiers(location,amount)\r\n        end\r\n\r\n        buttons.counts[location] = buttons.counts[location] + amount\r\n\r\n        if (location == \"profbonus\") then\r\n            updateProficiencyModifiers(amount)\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction minus(location, amount)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (location == \"str\") or (location == \"dex\") or (location == \"cons\") or (location == \"int\") or (location == \"wis\") or (location == \"cha\") then\r\n            updateAbilityModifiers(location,-amount)\r\n        end\r\n\r\n        --Prevents count from going below 0\r\n        --if buttons.counts[location] > amount - 1 then\r\n            buttons.counts[location] = buttons.counts[location] - amount\r\n        --else\r\n        --    buttons.counts[location] = 0\r\n        --end\r\n\r\n        if (location == \"profbonus\") then\r\n            updateProficiencyModifiers(-amount)\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction lockForm(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] > 1) then\r\n            buttons.counts[location] = 0\r\n        elseif (buttons.counts[location] == 1) then\r\n            buttons.counts[location] = 2\r\n        else\r\n            buttons.counts[location] = 1\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Value update functions\r\n-- *****************************************************************************\r\nfunction updateAbilityModifiers(location,amount)\r\n    prevval = buttons.counts[location]\r\n    newval = prevval + amount\r\n\r\n    oldmod = buttons.counts['v_' .. location]\r\n    newmod = math.floor(newval / 2) - 5\r\n\r\n    buttons.counts['v_' .. location] = newmod\r\n\r\n    updateAbilityModifier(location,oldmod,newmod)\r\n\r\n    if (location == \"str\") then\r\n        updateAbilityModifier('athlet',oldmod,newmod)\r\n    elseif (location == \"dex\") then\r\n        updateAbilityModifier('acrobat',oldmod,newmod)\r\n        updateAbilityModifier('sleight',oldmod,newmod)\r\n        updateAbilityModifier('stealth',oldmod,newmod)\r\n        updateAbilityModifier('initiative',oldmod,newmod)\r\n    elseif (location == \"cons\") then\r\n    elseif (location == \"int\") then\r\n        updateAbilityModifier('arcana',oldmod,newmod)\r\n        updateAbilityModifier('hist',oldmod,newmod)\r\n        updateAbilityModifier('invest',oldmod,newmod)\r\n        updateAbilityModifier('nature',oldmod,newmod)\r\n        updateAbilityModifier('relig',oldmod,newmod)\r\n    elseif (location == \"wis\") then\r\n        updateAbilityModifier('animal',oldmod,newmod)\r\n        updateAbilityModifier('insight',oldmod,newmod)\r\n        updateAbilityModifier('medic',oldmod,newmod)\r\n        updateAbilityModifier('percep',oldmod,newmod)\r\n        updateAbilityModifier('surv',oldmod,newmod)\r\n        --updateAbilityModifier('passwis',oldmod,newmod)\r\n    elseif (location == \"cha\") then\r\n        updateAbilityModifier('decep',oldmod,newmod)\r\n        updateAbilityModifier('inti',oldmod,newmod)\r\n        updateAbilityModifier('perfor',oldmod,newmod)\r\n        updateAbilityModifier('persu',oldmod,newmod)\r\n    end\r\nend\r\n\r\nfunction updateAbilityModifier(profname,oldmod,newmod)\r\n    )\r\n    increase = newmod - oldmod\r\n    if (profname == \"initiative\") or (profname == \"passwis\") then\r\n        buttons.counts[profname] = buttons.counts[profname] + increase\r\n    else\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + increase\r\n    end\r\nend\r\n\r\nfunction updateProficiencyModifiers(profamount)\r\n    -- When proficiency modifier is adjusted, update skill modifiers accordingly\r\n\r\n    prevProf = buttons.counts[\"profbonus\"] - profamount\r\n    newProf = buttons.counts[\"profbonus\"]\r\n\r\n    updateProficiencyModifier('acrobat',prevProf,newProf)\r\n    updateProficiencyModifier('animal',prevProf,newProf)\r\n    updateProficiencyModifier('arcana',prevProf,newProf)\r\n    updateProficiencyModifier('athlet',prevProf,newProf)\r\n    updateProficiencyModifier('decep',prevProf,newProf)\r\n    updateProficiencyModifier('hist',prevProf,newProf)\r\n    updateProficiencyModifier('insight',prevProf,newProf)\r\n    updateProficiencyModifier('inti',prevProf,newProf)\r\n    updateProficiencyModifier('invest',prevProf,newProf)\r\n    updateProficiencyModifier('medic',prevProf,newProf)\r\n    updateProficiencyModifier('nature',prevProf,newProf)\r\n    updateProficiencyModifier('percep',prevProf,newProf)\r\n    updateProficiencyModifier('perfor',prevProf,newProf)\r\n    updateProficiencyModifier('persu',prevProf,newProf)\r\n    updateProficiencyModifier('relig',prevProf,newProf)\r\n    updateProficiencyModifier('sleight',prevProf,newProf)\r\n    updateProficiencyModifier('stealth',prevProf,newProf)\r\n    updateProficiencyModifier('surv',prevProf,newProf)\r\n\r\n    updateProficiencyModifier('str',prevProf,newProf)\r\n    updateProficiencyModifier('dex',prevProf,newProf)\r\n    updateProficiencyModifier('cons',prevProf,newProf)\r\n    updateProficiencyModifier('int',prevProf,newProf)\r\n    updateProficiencyModifier('wis',prevProf,newProf)\r\n    updateProficiencyModifier('cha',prevProf,newProf)\r\nend\r\n\r\nfunction updateProficiencyModifier(profname,prevamount,newamount)\r\n    increase = newamount - prevamount\r\n    profstate = buttons.counts['p_s_' .. profname]\r\n    if (profstate == 1) then\r\n        prevbonus = math.floor(prevamount/2)\r\n        newbonus = math.floor(newamount/2)\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + newbonus - prevbonus\r\n    elseif (profstate == 2) then\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + increase\r\n    elseif (profstate == 3) then\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + 2*increase\r\n    end\r\nend\r\n\r\n\r\n-- *****************************************************************************\r\n-- Update field labels based on content\r\n-- *****************************************************************************\r\nfunction updateDisplay(firstTime)\r\n    for i,v in pairs(buttons) do\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            if (tostring(i) == \"lockButton\") then\r\n                if (buttons.counts[tostring(i)] > 1) then\r\n                    buttons[tostring(i)].display.label = \"LOCK\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                elseif (buttons.counts[tostring(i)] == 1) then\r\n                    buttons[tostring(i)].display.label = \"SEMI\"\r\n                else\r\n                    buttons[tostring(i)].display.label = \"OPEN\"\r\n                end\r\n            elseif (buttons[tostring(i)].isToggle == true) then\r\n                if (buttons.counts[tostring(i)] > 0) then\r\n                    buttons[tostring(i)].display.label = \"X\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                else\r\n                    buttons[tostring(i)].display.label = \"\"\r\n                end\r\n\r\n            elseif (buttons[tostring(i)].isProf == true) then\r\n                if (buttons.counts[tostring(i)] <= 0) then\r\n                    buttons[tostring(i)].display.label = \"\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                elseif (buttons.counts[tostring(i)] == 1) then\r\n                    buttons[tostring(i)].display.label = \"/2\"\r\n                elseif (buttons.counts[tostring(i)] == 2) then\r\n                    buttons[tostring(i)].display.label = \"*\"\r\n                else\r\n                    buttons[tostring(i)].display.label = \"x2\"\r\n                end\r\n            else\r\n                if (buttons[tostring(i)].isText == true) then\r\n                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])\r\n                    if (objs[tostring(i)] == nil) then\r\n                        buttons[tostring(i)].minusOne.label = \"Edit\"\r\n                    else\r\n                        buttons[tostring(i)].minusOne.label = \"Done\"\r\n                    end\r\n                else\r\n                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])\r\n                end\r\n            end\r\n            if (firstTime) then\r\n                self.createButton(buttons[tostring(i)].display)\r\n                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end\r\n                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end\r\n                if (tostring(i) == \"xp\") then\r\n                    self.createButton(buttons[tostring(i)].plusFive)\r\n                    self.createButton(buttons[tostring(i)].minusFive)\r\n                elseif ((buttons[tostring(i)].type == \"big10\") or (buttons[tostring(i)].type == \"mid10\")) then\r\n                    self.createButton(buttons[tostring(i)].plusTen)\r\n                    self.createButton(buttons[tostring(i)].minusTen)\r\n                end\r\n            else\r\n                self.editButton(buttons[tostring(i)].display)\r\n                for j,k in pairs(buttons[tostring(i)]) do\r\n                    if (string.sub(j,1,5) == \"minus\") or (string.sub(j,1,4) == \"plus\") then\r\n                        self.editButton(buttons[tostring(i)][j])\r\n                    end\r\n                end\r\n            end\r\n            -- Hide/Show buttons depending on lock status\r\n            if (buttons[tostring(i)].lockLevel <= buttons.counts[\"lockButton\"]) then\r\n                for j,k in pairs(buttons[tostring(i)]) do\r\n                    if (string.sub(j,1,5) == \"minus\") or (string.sub(j,1,4) == \"plus\") then\r\n                        self.editButton({index = buttons[tostring(i)][j].index, position = {0,0,0}, width=0, height=0})\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n\r\n--This is activated when onload runs. This sets all paramiters for our buttons.\r\n--I do not have to put this all into a function, but I prefer to do it this way.\r\n\r\nfunction setupButton(targetFunc, positions, sizes, label, offsets, isLeft)\r\n    local buttonInfo = {}\r\n        buttonInfo.function_owner = self\r\n        buttonInfo.index = buttons.index\r\n        buttonInfo.click_function = targetFunc\r\n\r\n        if isLeft then\r\n            orientationModifier = -1\r\n        else\r\n            orientationModifier = 1\r\n        end\r\n\r\n        if offsets == nil then\r\n            buttonInfo.position = {positions.x, positions.y, positions.z}\r\n        else\r\n            buttonInfo.position = {positions.x + (offsets.x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}\r\n        end\r\n\r\n        buttonInfo.width = sizes.width\r\n        buttonInfo.height = sizes.height\r\n        buttonInfo.font_size = sizes.font\r\n        buttonInfo.label = label\r\n    buttons.index = buttons.index + 1\r\n\r\n    return buttonInfo\r\nend\r\n\r\nfunction generateButtonParamiters()\r\n    for i,v in pairs(buttons) do\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            btn = tostring(i)\r\n            prefix = string.sub(btn, 1, 2)\r\n            if (btn == 'lockButton') then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'LockClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isToggle = true\r\n            elseif (prefix == \"__\") then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)\r\n                buttons[tostring(i)].isText = true\r\n            elseif (prefix == \"p_\") then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ProfClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isProf = true\r\n            elseif (prefix == \"v_\") then\r\n                buttons[tostring(i)].display = setupButton('dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n            elseif (prefix != \"t_\" ) then\r\n                buttons[tostring(i)].display = setupButton('dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)\r\n                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)\r\n                if (btn == \"xp\") then\r\n                    buttons[tostring(i)].minusFive = setupButton(tostring(i) .. 'MinusFive', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-100',buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, true)\r\n                    buttons[tostring(i)].plusFive = setupButton(tostring(i) .. 'PlusFive', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+100', buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, false)\r\n                elseif (buttons[tostring(i)].type == \"big10\") or (buttons[tostring(i)].type == \"mid10\") then\r\n                    buttons[tostring(i)].minusTen = setupButton(tostring(i) .. 'MinusTen', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-10',buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, true)\r\n                    buttons[tostring(i)].plusTen = setupButton(tostring(i) .. 'PlusTen', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+10', buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, false)\r\n                end\r\n            -- TO DO: Add treatment of four-state button 0, ??, 1, 2 here\r\n            else\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'DispClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isToggle = true\r\n            end\r\n        end\r\n    end\r\n    --updateDisplay()\r\n\r\nend\r\n",
      "LuaScriptState": "{\"saved_counts\":{\"counts\":0,\"index\":0,\"lockButton\":0,\"params\":0,\"spellSlotsMax1\":-1,\"spellSlotsMax2\":0,\"spellSlotsMax3\":0,\"spellSlotsMax4\":0,\"spellSlotsMax5\":0,\"spellSlotsMax6\":0,\"spellSlotsMax7\":0,\"spellSlotsMax8\":0,\"spellSlotsMax9\":0,\"spellSlotsUsed1\":0,\"spellSlotsUsed2\":0,\"spellSlotsUsed3\":0,\"spellSlotsUsed4\":0,\"spellSlotsUsed5\":0,\"spellSlotsUsed6\":0,\"spellSlotsUsed7\":0,\"spellSlotsUsed8\":0,\"spellSlotsUsed9\":0,\"targetFunc\":0}}",
      "GUID": "a2b198"
    },
    {
      "Name": "Custom_Token",
      "Transform": {
        "posX": 8.0,
        "posY": -1.1920929E-07,
        "posZ": 0.0,
        "rotX": -5.38217044E-08,
        "rotY": 270.011871,
        "rotZ": -1.00127509E-05,
        "scaleX": 0.863914251,
        "scaleY": 1.0,
        "scaleZ": 0.863914251
      },
      "Nickname": "Resource Tracker",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://i.imgur.com/Olf7EJr.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 25.0,
          "Stackable": false
        }
      },
      "XmlUI": "",
      "LuaScript": "-- Based on \"Universal Counter Tokens\" coded by: MrStump\r\n-- Modifications by Malle\r\n\r\n--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save\r\nfunction onSave()\r\n    local data_to_save = {}\r\n        data_to_save.saved_counts = {}\r\n        for i,v in pairs(buttons.counts) do\r\n            data_to_save.saved_counts[tostring(i)] = v or 0\r\n        end\r\n\r\n    saved_data = JSON.encode(data_to_save)\r\n\r\n    --Uncomment this line to reset the save data, necessary when messing with variable names\r\n    --saved_data = ''\r\n    return saved_data\r\nend\r\n\r\n\r\n-- *****************************************************************************\r\n-- OnLoad startup\r\n-- *****************************************************************************\r\n-- Loads the saved data then creates the buttons\r\nfunction onload(saved_data)\r\n    original_rot = {['x'] = 0,['y'] = 180,['z'] = 0}\r\n    initButtonsTable()\r\n    objs = {}\r\n\r\n    ------------------------------\r\n    --Edit below this line\r\n    ------------------------------\r\n\r\n    -- LockLevel:\r\n    --  0: always locked\r\n    --  1: locked if semi- or full lock\r\n    --  2: locked only in full lock\r\n    --  3+: not locked\r\n\r\n    thick = 0.099; sub_parameters_x = -2.00; dd = 1.15; dy = -4.8; dx = 5.1\r\n\r\n    createCounter('lockButton', 'wideToggle', 2.680, 0.75, 0, 3)\r\n\r\n\r\n\r\n    px = 0.980; dx = 1.700;\r\n    py = 0.040; dy = 1;\r\n    createTextField('resourceName', 'txtbig2', -1.65, py+0*dy, \"[Resource Name]\", 1);\r\n    createCounter('resourceMax',  'big',  px+0*dx, py+0*dy, 0, 1);\r\n    createCounter('resourceUsed', 'big',  px+1*dx, py+0*dy, 0, 2);\r\n\r\n    --if you added a location, you need to give it a position, coordinates are relative to the center of the model\r\n    --buttons.params.positions.test = {x = 3.67, y = 0.59, z = 3.1}\r\n\r\n    ------------------------------\r\n    --Don't touch below this line\r\n    ------------------------------\r\n\r\n    for i,v in pairs(buttons) do\r\n        buttons.counts[tostring(i)] = 0\r\n\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)\r\n            self.setVar(tostring(i) .. 'PlusFive', function () plus(tostring(i), 100) end)\r\n            self.setVar(tostring(i) .. 'PlusTen', function () plus(tostring(i), 10) end)\r\n            self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)\r\n            self.setVar(tostring(i) .. 'MinusFive', function () minus(tostring(i), 100) end)\r\n            self.setVar(tostring(i) .. 'MinusTen', function () minus(tostring(i), 10) end)\r\n            self.setVar(tostring(i) .. 'DispClick', function () dispclick(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'ProfClick', function () profclick(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'LockClick', function () lockForm(tostring(i)) end)\r\n            self.setVar(tostring(i) .. 'EditClick', function () editclick(tostring(i)) end)\r\n        end\r\n    end\r\n\r\n    generateButtonParamiters()\r\n\r\n    --Checks if there is a saved data. If there is, it gets the saved value for 'buttons.counts.ct'\r\n\r\n    if saved_data != '' then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        buttons.counts = loaded_data.saved_counts\r\n        for i,v in pairs(buttons) do\r\n            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then\r\n                if buttons.counts[tostring(i)] == nil then\r\n                    buttons.counts[tostring(i)] = 0\r\n                end\r\n            end\r\n        end\r\n    else\r\n        for i,v in pairs(buttons) do\r\n            if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params'  and tostring(i) != 'targetFunc' then\r\n                if buttons[tostring(i)].defaultValue == nil then\r\n                    buttons.counts[tostring(i)] = 0\r\n                else\r\n                    buttons.counts[tostring(i)] = buttons[tostring(i)].defaultValue\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    updateDisplay(true)\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Form creation functions\r\n-- *****************************************************************************\r\nfunction createTextField(sname, type, px, py, defaultValue, lockLevel)\r\n    name = '__' .. sname;\r\n    buttons[name] = { type = type }\r\n    buttons.params.positions[name] = {x = px, y = thick, z = py}\r\n    buttons[name].defaultValue = defaultValue\r\n    buttons[name].lockLevel = lockLevel\r\nend\r\n\r\nfunction createSubCounter(name, py, defaultValue, lockLevel)\r\n    createCounter('p_s_' .. name, 'toggle', sub_parameters_x - 0.72, py, 0, lockLevel)\r\n    createCounter('s_' .. name, 'small', sub_parameters_x, py, defaultValue, lockLevel)\r\nend\r\n\r\nfunction createCounter(name, btype, px, py, defaultValue, lockLevel)\r\n    buttons[name] = {type = btype}\r\n    buttons.params.positions[name] = {x = px, y = thick, z = py}\r\n    buttons[name].defaultValue = defaultValue\r\n    buttons[name].lockLevel = lockLevel\r\nend\r\n\r\nfunction createValue(name, btype, px, py, defaultValue)\r\n    createCounter('v_' .. name, btype, px, py, defaultValue)\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Standardized form sizes\r\n-- *****************************************************************************\r\nfunction initButtonsTable()\r\n\r\n    buttons = {}\r\n    buttons.index = 0\r\n    buttons.counts = {}\r\n    buttons.params = {}\r\n    buttons.params.positions = {}\r\n    buttons.params.positions.offsets = {}\r\n    buttons.params.sizes = {}\r\n    buttons.targetFunc = {}\r\n\r\n    --make a style of button by adding a new size\r\n    buttons.params.sizes.std = {\r\n        display = {width = 200, height = 150, font = 100},\r\n        button = {width = 50, height = 50, font = 50},\r\n        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.mid = {\r\n        display = {width = 0, height = 0, font = 280},\r\n        button = {width = 140, height = 130, font = 150},\r\n        offsets = { bottomButtons = {x = 0.36, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.big = {\r\n        display = {width = 0, height = 0, font = 400},\r\n        button = {width = 160, height = 160, font = 230},\r\n        offsets = { bottomButtons = {x = 0.420, y = 0, z = -0.01}, topButtons = {x = 0.1, y = 0, z = -0.17} }\r\n    }\r\n    buttons.params.sizes.mid10 = {\r\n        display = {width = 0, height = 0, font = 280},\r\n        button = {width = 280, height = 170, font = 150},\r\n        offsets = { bottomButtons = {x = 0.9, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.big10 = {\r\n        display = {width = 0, height = 0, font = 450},\r\n        button = {width = 400, height = 210, font = 220},\r\n        offsets = { bottomButtons = {x = 1.5, y = 0, z = 0}, topButtons = {x = 2.4, y = 0, z = -0} }\r\n    }\r\n    buttons.params.sizes.small = {\r\n        display = {width = 0, height = 0, font = 140},\r\n        button = {width = 110, height = 100, font = 140},\r\n        offsets = { bottomButtons = {x = 0.3, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.toggle = {\r\n        display = {width = 200, height = 170, font = 160},\r\n        button = {width = 60, height = 60, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.toggleBig = {\r\n        display = {width = 540, height = 380, font = 400},\r\n        button = {width = 60, height = 60, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.wideToggle = {\r\n        display = {width = 500, height = 120, font = 90},\r\n        button = {width = 60, height = 400, font = 100},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = 0}, topButtons = {x = 0.1, y = 0, z = -0.1} }\r\n    }\r\n    buttons.params.sizes.xp = {\r\n        display = {width = 0, height = 0, font = 150},\r\n        button = {width = 220, height = 150, font = 80},\r\n        offsets = { bottomButtons = {x = 1.15, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.hd = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = {width = 220, height = 150, font = 80},\r\n        offsets = { bottomButtons = {x = 0.2, y = 0, z = -0.4}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.hdBig = {\r\n        display = {width = 0, height = 0, font = 200},\r\n        button = {width = 280, height = 170, font = 150},\r\n        offsets = { bottomButtons = {x = 0.9, y = 0, z = 0}, topButtons = {x = 1.5, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt = {\r\n        display = {width = 0, height = 0, font = 70},\r\n        button = {width = 160, height = 110, font = 80},\r\n        offsets = { bottomButtons = {x = -2.1, y = 0, z = -0.3}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt2 = {\r\n        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -2.3, y = 0, z = -1.3}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txt3 = {\r\n        display = buttons.params.sizes.txt.display, button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -1.7, y = 0, z = -1.45}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txtbig = {\r\n        display = {width = 0, height = 0, font = 150},\r\n        button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = 3.70, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n    buttons.params.sizes.txtbig2 = {\r\n        display = {width = 0, height = 0, font = 250},\r\n        button = buttons.params.sizes.txt.button,\r\n        offsets = { bottomButtons = {x = -1.4, y = 0, z = -0.5}, topButtons = {x = 0, y = 0, z = 0} }\r\n    }\r\n\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Button press functions\r\n-- *****************************************************************************\r\nfunction editclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        nm = tostring(location) --string.gsub(location, \"\", \"\")\r\n        --print(\"Edit click \" .. nm)\r\n        local sizes = buttons.params.sizes[buttons[nm].type].offsets\r\n        --print(sizes)\r\n        mpos = self.getPosition(); pos = buttons.params.positions[nm]\r\n        --print(self.getRotation()[1]); print(self.getRotation()[2]); print(self.getRotation()[3]);\r\n        --scale = self.getScale();    print(scale[3])\r\n        local btns = self.getButtons()\r\n        if (btns == nil) then return end\r\n        --print(buttons)\r\n        button = nil\r\n        fname = tostring(location) .. 'EditClick'\r\n        --for i,v in pairs(btns) do\r\n            --print(tostring(i) .. ' :: ' .. tostring(v.click_function))\r\n        --    if (v.click_function == fname) then\r\n        --        button = v\r\n        --        break\r\n        --    end\r\n        --end\r\n        --if (button == nil) then return end\r\n        --print(\"z = \" .. tostring(pos.z))\r\n        --pos = button.position\r\n        --ppos = button.position\r\n        ppos = {pos.x - sizes.bottomButtons.x - 0.3, pos.y, pos.z*1.4 + sizes.bottomButtons.z*1.4}--ppos = {pos.x*1.1 - sizes.bottomButtons.x*1.3, pos.y, pos.z-2 + (pos.z+3.8) * 0.25}\r\n        --ppos = {pos.x - sizes.bottomButtons.x, pos.y, pos.z + sizes.bottomButtons.z/2}\r\n        --print(tostring(pos[1]) .. ' , ' .. tostring(pos[2]) .. ' , ' .. tostring(pos[3]))\r\n        --print(tostring(pos.x) .. ' , ' .. tostring(pos.y) .. ' , ' .. tostring(pos.z))\r\n        if (objs[nm] != nil) then\r\n            buttons.counts[nm] = objs[nm].getDescription()\r\n            destroyObject(objs[nm])\r\n            objs[nm] = nil\r\n        else\r\n            local pos = self.getPosition()\r\n            local rot = self.getRotation()\r\n            local sca = self.getScale()\r\n            print('Pos: ' .. pos['x'] .. ', ' .. pos['y'] .. ', ' .. pos['z'])\r\n            print('Rot: ' .. rot['x'] .. ', ' .. rot['y'] .. ', ' .. rot['z'])\r\n            print('Sca: ' .. sca['x'] .. ', ' .. sca['y'] .. ', ' .. sca['z'])\r\n            local pawn_pos = {}\r\n            pawn_pos['x'] = pos['x']+ppos[1]--+1.2\r\n            pawn_pos['z'] = pos['z']-ppos[3] --1.8\r\n            --translate point to origin\r\n            local tempX = (pawn_pos['x'] - pos['x'])*sca['x']\r\n            local tempZ = (pawn_pos['z'] - pos['z'])*sca['z']\r\n            --now apply rotation\r\n            local rad_rot = math.rad(original_rot['y'] - rot['y'])\r\n            local obj_rotatedX = tempX * math.cos(rad_rot) - tempZ * math.sin(rad_rot)\r\n            local obj_rotatedZ = tempX * math.sin(rad_rot) + tempZ * math.cos(rad_rot);\r\n            --translate back\r\n            local new_pawn_x = obj_rotatedX + pos['x'];\r\n            local new_pawn_z = obj_rotatedZ + pos['z'];\r\n            local params = {}\r\n            --params.type = 'PlayerPawn'\r\n            local final_pos={new_pawn_x, pos['y']+1, new_pawn_z}\r\n\r\n            o = spawnObject({\r\n                type = 'backgammon_piece_brown',\r\n                --position = {mpos[1] + pos.x, mpos[2] + pos.y+2, mpos[3] - pos.z},\r\n                position = final_pos, --{mpos[1] + pos[1], mpos[2] + pos[2]+2, mpos[3] - pos[3]},\r\n                --position = button.position,\r\n                scale = {0.4, 0.4, 0.4}\r\n            })\r\n            --o.position = button.position\r\n            objs[nm] = o\r\n            o.setDescription(tostring(buttons.counts[nm]))\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction dud()\r\n\r\nend\r\n\r\nfunction profclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] >= 3) then\r\n            dd = -2*buttons.counts[\"profbonus\"]\r\n            buttons.counts[location] = 0\r\n        elseif (buttons.counts[location] <= 0) then\r\n            dd = math.floor(0.5*buttons.counts[\"profbonus\"])\r\n            buttons.counts[location] = 1\r\n        elseif (buttons.counts[location] == 1) then\r\n            dd = math.ceil(0.5*buttons.counts[\"profbonus\"])\r\n            buttons.counts[location] = 2\r\n        else\r\n            dd = buttons.counts[\"profbonus\"]\r\n            buttons.counts[location] = 3\r\n        end\r\n        sf = string.sub(location, 3, string.len(location));\r\n        --print(location .. ' => ' .. sf)\r\n\r\n        --Added an extra \"if\" statement to account for independent toggle buttons (Such as Death Saving Throws)\r\n        if (buttons.counts[sf] != nil) then\r\n            buttons.counts[sf] = buttons.counts[sf] + dd\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction dispclick(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] > 0) then\r\n            dd = -2\r\n            buttons.counts[location] = 0\r\n        else\r\n            dd = 2\r\n            buttons.counts[location] = 1\r\n        end\r\n        sf = string.sub(location, 3, string.len(location));\r\n        --print(location .. ' => ' .. sf)\r\n\r\n        --Added an extra \"if\" statement to account for independent toggle buttons (Such as Death Saving Throws)\r\n        if (buttons.counts[sf] != nil) then\r\n            buttons.counts[sf] = buttons.counts[sf] + dd\r\n        end\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction plus(location, amount)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (location == \"str\") or (location == \"dex\") or (location == \"cons\") or (location == \"int\") or (location == \"wis\") or (location == \"cha\") then\r\n            updateAbilityModifiers(location,amount)\r\n        end\r\n\r\n        buttons.counts[location] = buttons.counts[location] + amount\r\n\r\n        if (location == \"profbonus\") then\r\n            updateProficiencyModifiers(amount)\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction minus(location, amount)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (location == \"str\") or (location == \"dex\") or (location == \"cons\") or (location == \"int\") or (location == \"wis\") or (location == \"cha\") then\r\n            updateAbilityModifiers(location,-amount)\r\n        end\r\n\r\n        --Prevents count from going below 0\r\n        --if buttons.counts[location] > amount - 1 then\r\n            buttons.counts[location] = buttons.counts[location] - amount\r\n        --else\r\n        --    buttons.counts[location] = 0\r\n        --end\r\n\r\n        if (location == \"profbonus\") then\r\n            updateProficiencyModifiers(-amount)\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\nfunction lockForm(location)\r\n    if (buttons.counts[\"lockButton\"] < buttons[location].lockLevel) then\r\n        if (buttons.counts[location] > 1) then\r\n            buttons.counts[location] = 0\r\n        elseif (buttons.counts[location] == 1) then\r\n            buttons.counts[location] = 2\r\n        else\r\n            buttons.counts[location] = 1\r\n        end\r\n\r\n        updateDisplay(false)\r\n    end\r\nend\r\n\r\n-- *****************************************************************************\r\n-- Value update functions\r\n-- *****************************************************************************\r\nfunction updateAbilityModifiers(location,amount)\r\n    prevval = buttons.counts[location]\r\n    newval = prevval + amount\r\n\r\n    oldmod = buttons.counts['v_' .. location]\r\n    newmod = math.floor(newval / 2) - 5\r\n\r\n    buttons.counts['v_' .. location] = newmod\r\n\r\n    updateAbilityModifier(location,oldmod,newmod)\r\n\r\n    if (location == \"str\") then\r\n        updateAbilityModifier('athlet',oldmod,newmod)\r\n    elseif (location == \"dex\") then\r\n        updateAbilityModifier('acrobat',oldmod,newmod)\r\n        updateAbilityModifier('sleight',oldmod,newmod)\r\n        updateAbilityModifier('stealth',oldmod,newmod)\r\n        updateAbilityModifier('initiative',oldmod,newmod)\r\n    elseif (location == \"cons\") then\r\n    elseif (location == \"int\") then\r\n        updateAbilityModifier('arcana',oldmod,newmod)\r\n        updateAbilityModifier('hist',oldmod,newmod)\r\n        updateAbilityModifier('invest',oldmod,newmod)\r\n        updateAbilityModifier('nature',oldmod,newmod)\r\n        updateAbilityModifier('relig',oldmod,newmod)\r\n    elseif (location == \"wis\") then\r\n        updateAbilityModifier('animal',oldmod,newmod)\r\n        updateAbilityModifier('insight',oldmod,newmod)\r\n        updateAbilityModifier('medic',oldmod,newmod)\r\n        updateAbilityModifier('percep',oldmod,newmod)\r\n        updateAbilityModifier('surv',oldmod,newmod)\r\n        --updateAbilityModifier('passwis',oldmod,newmod)\r\n    elseif (location == \"cha\") then\r\n        updateAbilityModifier('decep',oldmod,newmod)\r\n        updateAbilityModifier('inti',oldmod,newmod)\r\n        updateAbilityModifier('perfor',oldmod,newmod)\r\n        updateAbilityModifier('persu',oldmod,newmod)\r\n    end\r\nend\r\n\r\nfunction updateAbilityModifier(profname,oldmod,newmod)\r\n    )\r\n    increase = newmod - oldmod\r\n    if (profname == \"initiative\") or (profname == \"passwis\") then\r\n        buttons.counts[profname] = buttons.counts[profname] + increase\r\n    else\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + increase\r\n    end\r\nend\r\n\r\nfunction updateProficiencyModifiers(profamount)\r\n    -- When proficiency modifier is adjusted, update skill modifiers accordingly\r\n\r\n    prevProf = buttons.counts[\"profbonus\"] - profamount\r\n    newProf = buttons.counts[\"profbonus\"]\r\n\r\n    updateProficiencyModifier('acrobat',prevProf,newProf)\r\n    updateProficiencyModifier('animal',prevProf,newProf)\r\n    updateProficiencyModifier('arcana',prevProf,newProf)\r\n    updateProficiencyModifier('athlet',prevProf,newProf)\r\n    updateProficiencyModifier('decep',prevProf,newProf)\r\n    updateProficiencyModifier('hist',prevProf,newProf)\r\n    updateProficiencyModifier('insight',prevProf,newProf)\r\n    updateProficiencyModifier('inti',prevProf,newProf)\r\n    updateProficiencyModifier('invest',prevProf,newProf)\r\n    updateProficiencyModifier('medic',prevProf,newProf)\r\n    updateProficiencyModifier('nature',prevProf,newProf)\r\n    updateProficiencyModifier('percep',prevProf,newProf)\r\n    updateProficiencyModifier('perfor',prevProf,newProf)\r\n    updateProficiencyModifier('persu',prevProf,newProf)\r\n    updateProficiencyModifier('relig',prevProf,newProf)\r\n    updateProficiencyModifier('sleight',prevProf,newProf)\r\n    updateProficiencyModifier('stealth',prevProf,newProf)\r\n    updateProficiencyModifier('surv',prevProf,newProf)\r\n\r\n    updateProficiencyModifier('str',prevProf,newProf)\r\n    updateProficiencyModifier('dex',prevProf,newProf)\r\n    updateProficiencyModifier('cons',prevProf,newProf)\r\n    updateProficiencyModifier('int',prevProf,newProf)\r\n    updateProficiencyModifier('wis',prevProf,newProf)\r\n    updateProficiencyModifier('cha',prevProf,newProf)\r\nend\r\n\r\nfunction updateProficiencyModifier(profname,prevamount,newamount)\r\n    increase = newamount - prevamount\r\n    profstate = buttons.counts['p_s_' .. profname]\r\n    if (profstate == 1) then\r\n        prevbonus = math.floor(prevamount/2)\r\n        newbonus = math.floor(newamount/2)\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + newbonus - prevbonus\r\n    elseif (profstate == 2) then\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + increase\r\n    elseif (profstate == 3) then\r\n        buttons.counts['s_' .. profname] = buttons.counts['s_' .. profname] + 2*increase\r\n    end\r\nend\r\n\r\n\r\n-- *****************************************************************************\r\n-- Update field labels based on content\r\n-- *****************************************************************************\r\nfunction updateDisplay(firstTime)\r\n    for i,v in pairs(buttons) do\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            if (tostring(i) == \"lockButton\") then\r\n                if (buttons.counts[tostring(i)] > 1) then\r\n                    buttons[tostring(i)].display.label = \"TOTAL LOCK\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                elseif (buttons.counts[tostring(i)] == 1) then\r\n                    buttons[tostring(i)].display.label = \"SEMI LOCK\"\r\n                else\r\n                    buttons[tostring(i)].display.label = \"UNLOCKED\"\r\n                end\r\n            elseif (buttons[tostring(i)].isToggle == true) then\r\n                if (buttons.counts[tostring(i)] > 0) then\r\n                    buttons[tostring(i)].display.label = \"X\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                else\r\n                    buttons[tostring(i)].display.label = \"\"\r\n                end\r\n\r\n            elseif (buttons[tostring(i)].isProf == true) then\r\n                if (buttons.counts[tostring(i)] <= 0) then\r\n                    buttons[tostring(i)].display.label = \"\"\r\n                    --buttons[tostring(i)].display.label.setColorTint(0, 0, 0)\r\n                elseif (buttons.counts[tostring(i)] == 1) then\r\n                    buttons[tostring(i)].display.label = \"/2\"\r\n                elseif (buttons.counts[tostring(i)] == 2) then\r\n                    buttons[tostring(i)].display.label = \"*\"\r\n                else\r\n                    buttons[tostring(i)].display.label = \"x2\"\r\n                end\r\n            else\r\n                if (buttons[tostring(i)].isText == true) then\r\n                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])\r\n                    if (objs[tostring(i)] == nil) then\r\n                        buttons[tostring(i)].minusOne.label = \"Edit\"\r\n                    else\r\n                        buttons[tostring(i)].minusOne.label = \"Done\"\r\n                    end\r\n                else\r\n                    buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])\r\n                end\r\n            end\r\n            if (firstTime) then\r\n                self.createButton(buttons[tostring(i)].display)\r\n                if (buttons[tostring(i)].plusOne != nil) then self.createButton(buttons[tostring(i)].plusOne) end\r\n                if (buttons[tostring(i)].minusOne != nil) then self.createButton(buttons[tostring(i)].minusOne) end\r\n                if (tostring(i) == \"xp\") then\r\n                    self.createButton(buttons[tostring(i)].plusFive)\r\n                    self.createButton(buttons[tostring(i)].minusFive)\r\n                elseif ((buttons[tostring(i)].type == \"big10\") or (buttons[tostring(i)].type == \"mid10\")) then\r\n                    self.createButton(buttons[tostring(i)].plusTen)\r\n                    self.createButton(buttons[tostring(i)].minusTen)\r\n                end\r\n            else\r\n                self.editButton(buttons[tostring(i)].display)\r\n                for j,k in pairs(buttons[tostring(i)]) do\r\n                    if (string.sub(j,1,5) == \"minus\") or (string.sub(j,1,4) == \"plus\") then\r\n                        self.editButton(buttons[tostring(i)][j])\r\n                    end\r\n                end\r\n            end\r\n            -- Hide/Show buttons depending on lock status\r\n            if (buttons[tostring(i)].lockLevel <= buttons.counts[\"lockButton\"]) then\r\n                for j,k in pairs(buttons[tostring(i)]) do\r\n                    if (string.sub(j,1,5) == \"minus\") or (string.sub(j,1,4) == \"plus\") then\r\n                        self.editButton({index = buttons[tostring(i)][j].index, position = {0,0,0}, width=0, height=0})\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n\r\n--This is activated when onload runs. This sets all paramiters for our buttons.\r\n--I do not have to put this all into a function, but I prefer to do it this way.\r\n\r\nfunction setupButton(targetFunc, positions, sizes, label, offsets, isLeft)\r\n    local buttonInfo = {}\r\n        buttonInfo.function_owner = self\r\n        buttonInfo.index = buttons.index\r\n        buttonInfo.click_function = targetFunc\r\n\r\n        if isLeft then\r\n            orientationModifier = -1\r\n        else\r\n            orientationModifier = 1\r\n        end\r\n\r\n        if offsets == nil then\r\n            buttonInfo.position = {positions.x, positions.y, positions.z}\r\n        else\r\n            buttonInfo.position = {positions.x + (offsets.x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}\r\n        end\r\n\r\n        buttonInfo.width = sizes.width\r\n        buttonInfo.height = sizes.height\r\n        buttonInfo.font_size = sizes.font\r\n        buttonInfo.label = label\r\n    buttons.index = buttons.index + 1\r\n\r\n    return buttonInfo\r\nend\r\n\r\nfunction generateButtonParamiters()\r\n    for i,v in pairs(buttons) do\r\n        if tostring(i) != 'index' and tostring(i) != 'counts' and tostring(i) != 'params' and tostring(i) != 'targetFunc' then\r\n            btn = tostring(i)\r\n            prefix = string.sub(btn, 1, 2)\r\n            if (btn == 'lockButton') then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'LockClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isToggle = true\r\n            elseif (prefix == \"__\") then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'EditClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, 'Edit', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)\r\n                buttons[tostring(i)].isText = true\r\n            elseif (prefix == \"p_\") then\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'ProfClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isProf = true\r\n            elseif (prefix == \"v_\") then\r\n                buttons[tostring(i)].display = setupButton('dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n            elseif (prefix != \"t_\" ) then\r\n                buttons[tostring(i)].display = setupButton('dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)\r\n                buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)\r\n                if (btn == \"xp\") then\r\n                    buttons[tostring(i)].minusFive = setupButton(tostring(i) .. 'MinusFive', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-100',buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, true)\r\n                    buttons[tostring(i)].plusFive = setupButton(tostring(i) .. 'PlusFive', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+100', buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, false)\r\n                elseif (buttons[tostring(i)].type == \"big10\") or (buttons[tostring(i)].type == \"mid10\") then\r\n                    buttons[tostring(i)].minusTen = setupButton(tostring(i) .. 'MinusTen', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-10',buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, true)\r\n                    buttons[tostring(i)].plusTen = setupButton(tostring(i) .. 'PlusTen', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+10', buttons.params.sizes[buttons[tostring(i)].type].offsets.topButtons, false)\r\n                end\r\n            -- TO DO: Add treatment of four-state button 0, ??, 1, 2 here\r\n            else\r\n                buttons[tostring(i)].display = setupButton(tostring(i) .. 'DispClick', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)\r\n                buttons[tostring(i)].isToggle = true\r\n            end\r\n        end\r\n    end\r\n    --updateDisplay()\r\n\r\nend\r\n",
      "LuaScriptState": "{\"saved_counts\":{\"__resourceName\":\"\\u003fанна\",\"counts\":0,\"index\":0,\"lockButton\":0,\"params\":0,\"resourceMax\":6,\"resourceUsed\":4,\"targetFunc\":0}}",
      "GUID": "3e7bd2"
    }
  ],
  "TabStates": {},
  "VersionNumber": ""
}